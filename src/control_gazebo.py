#!/usr/bin/env python
import rospy, rospkg 
from tf.transformations import quaternion_from_euler, euler_from_quaternion

from gazebo_msgs.msg import *
from geometry_msgs.msg import *
from std_srvs.srv import *
from gazebo_msgs.srv import *

import numpy as np

'''
 Gazebo clients
'''

def delete_obstacle(model_name):
    # service client for deleting obstacle in gazebo
    rospy.wait_for_service('gazebo/delete_model', timeout=5)
    try:
        delete = rospy.ServiceProxy('gazebo/delete_model', DeleteModel)
        delete(model_name)
    except rospy.ServiceException, e:
        rospy.logerr("Service call failed: {}".format(e))

def get_link_state(link_name):
    rospy.wait_for_service('gazebo/get_link_state')
    try:
        service = rospy.ServiceProxy('gazebo/get_link_state', GetLinkState)
        result = service(link_name, "world")
        return result
    except rospy.ServiceException, e:
        rospy.logerr("Service call failed: {}".format(e))

def set_link_state(link_state):
    rospy.wait_for_service('gazebo/set_link_state')
    try:
        service = rospy.ServiceProxy('gazebo/set_link_state', SetLinkState)
        result = service(link_state)
    except rospy.ServiceException, e:
        rospy.logerr("Service call failed: {}".format(e))

def get_model_names():
    models = []
    try:
        get_world_properties = rospy.ServiceProxy('gazebo/get_world_properties',
                GetWorldProperties)
        properties = get_world_properties()
        models = properties.model_names
    except rospy.ServiceException, e:
        rospy.logerr("Service call failed: {}".format(e))

    return models

def get_model_state(model):
    # service client for getting robot pose in gazebo
    rospy.wait_for_service('gazebo/get_model_state')
    try:
        service = rospy.ServiceProxy('gazebo/get_model_state', GetModelState)
        state = service(model, "world")
        return state
    except rospy.ServiceException, e:
        rospy.logerr("Service call failed: {}".format(e))

def set_model_state(model_state):
    rospy.wait_for_service('gazebo/set_model_state')
    try:
        service = rospy.ServiceProxy('gazebo/set_model_state', SetModelState)
        service(model_state)
    except rospy.ServiceException, e:
        rospy.logerr("Service call failed: {}".format(e))

def pause():
    # service client for pausing physics
    rospy.wait_for_service('gazebo/pause_physics')
    try:
        pause_physics = rospy.ServiceProxy('gazebo/pause_physics', Empty)
        pause_physics()
    except rospy.ServiceException, e:
        rospy.logerr("Service call failed: {}".format(e))

def resume():
    # service client for pausing physics
    rospy.wait_for_service('gazebo/unpause_physics')
    try:
        resume_physics = rospy.ServiceProxy('gazebo/unpause_physics', Empty)
        resume_physics()
    except rospy.ServiceException, e:
        rospy.logerr("Service call failed: {}".format(e))

def set_robot_pose(x, y, yaw):
    # service client for setting robot pose in gazebo
    model_state = ModelState("jackal",
            Pose(Point(x,y,0.065),Quaternion(*(quaternion_from_euler(0,0,yaw)))),
            Twist(Vector3(0,0,0), Vector3(0,0,0)), "map")

    set_model_state(model_state)

def set_amcl_pose(x,y,yaw):
    # not in gazebo, but for testing purposes.
    amcl_publisher = rospy.Publisher("initialpose", PoseWithCovarianceStamped,
            queue_size=10, latch=True)
    # set initial position for amcl
    init_pose = PoseWithCovarianceStamped()
    init_pose.pose.pose.position = Point(x,y,0)
    init_pose.pose.pose.orientation = Quaternion(*(quaternion_from_euler(0,0,yaw)))
    # init_pose.pose.covariance = np.identity(6).flatten()
    init_pose.pose.covariance = np.zeros(36)
    init_pose.pose.covariance[0] = 0.25
    init_pose.pose.covariance[7] = 0.25
    init_pose.pose.covariance[35] = 0.05
    init_pose.header.stamp = rospy.Time.now()
    init_pose.header.frame_id = "map"

    amcl_publisher.publish(init_pose)

def move_walls(x,y):
    # to conveniently shift all walls in world generated by octomap_to_gazebo package
    # need to do a 'reset world' after for all the walls to shift
    models = get_model_names()

    for model in models:
        if 'Wall' in model:
            link_name = "{}::{}".format(model, model)
            # print(link_name)
            result = get_link_state(link_name)
            # print(result.success)
            # print(result.status_message)
            link_state = result.link_state
            link_state.pose.position.x += x
            link_state.pose.position.y += y

            set_link_state(link_state)
            # rospy.sleep(0.5)
